import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';
import { InjectionToken, Directive, TemplateRef, Component, ElementRef, Renderer2, ViewContainerRef, ContentChild, ViewChild, Input, EventEmitter, ContentChildren, HostBinding, Output, ComponentFactoryResolver, Inject, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DOCUMENT, CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/cdk/portal';

function MdbTabComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
const _c0 = ["*"];
function MdbTabsComponent_li_1_ng_template_2_ng_template_0_Template(rf, ctx) { }
function MdbTabsComponent_li_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MdbTabsComponent_li_1_ng_template_2_ng_template_0_Template, 0, 0, "ng-template", 7);
} if (rf & 2) {
    const tab_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("cdkPortalOutlet", tab_r2.titleContent);
} }
function MdbTabsComponent_li_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const tab_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵtextInterpolate(tab_r2.title);
} }
function MdbTabsComponent_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 4);
    ɵngcc0.ɵɵlistener("click", function MdbTabsComponent_li_1_Template_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10); const i_r3 = restoredCtx.index; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.setActiveTab(i_r3); });
    ɵngcc0.ɵɵelementStart(1, "a", 5);
    ɵngcc0.ɵɵtemplate(2, MdbTabsComponent_li_1_ng_template_2_Template, 1, 1, "ng-template", 6);
    ɵngcc0.ɵɵtemplate(3, MdbTabsComponent_li_1_ng_template_3_Template, 1, 1, "ng-template", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", tab_r2.active)("disabled", tab_r2.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", tab_r2.titleContent);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !tab_r2.titleContent);
} }
function MdbTabsComponent_ng_container_3_ng_template_2_Template(rf, ctx) { }
const _c1 = function (a0, a1) { return { show: a0, active: a1 }; };
function MdbTabsComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵtemplate(2, MdbTabsComponent_ng_container_3_ng_template_2_Template, 0, 0, "ng-template", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c1, tab_r11.active, tab_r11.active));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("tab", tab_r11);
} }
const _c2 = function (a0, a1, a2, a3, a4, a5, a6) { return { "nav-pills": a0, "nav-tabs": a1, "nav-fill": a2, "nav-justified": a3, "flex-column": a4, "col-3": a5, "text-center": a6 }; };
const _c3 = function (a0) { return { "col-9": a0 }; };
const MDB_TAB_CONTENT = new InjectionToken('MdbTabContentDirective');
class MdbTabContentDirective {
    constructor(template) {
        this.template = template;
    }
}
MdbTabContentDirective.ɵfac = function MdbTabContentDirective_Factory(t) { return new (t || MdbTabContentDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MdbTabContentDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MdbTabContentDirective, selectors: [["", "mdbTabContent", ""]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MDB_TAB_CONTENT, useExisting: MdbTabContentDirective }])] });
MdbTabContentDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTabContentDirective, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbTabContent]',
                providers: [{ provide: MDB_TAB_CONTENT, useExisting: MdbTabContentDirective }]
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

const MDB_TAB_TITLE = new InjectionToken('MdbTabTitleDirective');
class MdbTabTitleDirective {
    constructor(template) {
        this.template = template;
    }
}
MdbTabTitleDirective.ɵfac = function MdbTabTitleDirective_Factory(t) { return new (t || MdbTabTitleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
MdbTabTitleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MdbTabTitleDirective, selectors: [["", "mdbTabTitle", ""]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MDB_TAB_TITLE, useExisting: MdbTabTitleDirective }])] });
MdbTabTitleDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTabTitleDirective, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbTabTitle]',
                providers: [{ provide: MDB_TAB_TITLE, useExisting: MdbTabTitleDirective }]
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

class MdbTabComponent {
    constructor(_elementRef, _renderer, _vcr) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._vcr = _vcr;
        this.activeStateChange$ = new Subject();
        this._disabled = false;
        this._contentPortal = null;
        this._titlePortal = null;
        this._active = false;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get active() {
        return this._active;
    }
    get content() {
        return this._contentPortal;
    }
    get titleContent() {
        return this._titlePortal;
    }
    get shouldAttach() {
        return this._lazyContent === undefined;
    }
    // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures
    set active(value) {
        if (value) {
            this._renderer.addClass(this._elementRef.nativeElement, 'show');
            this._renderer.addClass(this._elementRef.nativeElement, 'active');
        }
        else {
            this._renderer.removeClass(this._elementRef.nativeElement, 'show');
            this._renderer.removeClass(this._elementRef.nativeElement, 'active');
        }
        this._active = value;
        this.activeStateChange$.next(value);
    }
    ngOnInit() {
        this._createContentPortal();
        if (this._titleContent) {
            this._createTitlePortal();
        }
    }
    _createContentPortal() {
        const content = this._lazyContent || this._content;
        this._contentPortal = new TemplatePortal(content, this._vcr);
    }
    _createTitlePortal() {
        this._titlePortal = new TemplatePortal(this._titleContent, this._vcr);
    }
}
MdbTabComponent.ɵfac = function MdbTabComponent_Factory(t) { return new (t || MdbTabComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
MdbTabComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbTabComponent, selectors: [["mdb-tab"]], contentQueries: function MdbTabComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MDB_TAB_CONTENT, 7, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MDB_TAB_TITLE, 7, TemplateRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._titleContent = _t.first);
    } }, viewQuery: function MdbTabComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);
    } }, inputs: { disabled: "disabled", title: "title" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function MdbTabComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, MdbTabComponent_ng_template_0_Template, 1, 0, "ng-template");
    } }, encapsulation: 2 });
MdbTabComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ViewContainerRef }
];
MdbTabComponent.propDecorators = {
    _lazyContent: [{ type: ContentChild, args: [MDB_TAB_CONTENT, { read: TemplateRef, static: true },] }],
    _titleContent: [{ type: ContentChild, args: [MDB_TAB_TITLE, { read: TemplateRef, static: true },] }],
    _content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    disabled: [{ type: Input }],
    title: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTabComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-tab',
                template: "<ng-template><ng-content></ng-content></ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }]; }, { disabled: [{
            type: Input
        }], _lazyContent: [{
            type: ContentChild,
            args: [MDB_TAB_CONTENT, { read: TemplateRef, static: true }]
        }], _titleContent: [{
            type: ContentChild,
            args: [MDB_TAB_TITLE, { read: TemplateRef, static: true }]
        }], _content: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }], title: [{
            type: Input
        }] }); })();

class MdbTabChange {
}
class MdbTabsComponent {
    constructor() {
        this._destroy$ = new Subject();
        this._fill = false;
        this._justified = false;
        this._pills = false;
        this._vertical = false;
        this.activeTabChange = new EventEmitter();
    }
    get fill() {
        return this._fill;
    }
    set fill(value) {
        this._fill = coerceBooleanProperty(value);
    }
    get justified() {
        return this._justified;
    }
    set justified(value) {
        this._justified = coerceBooleanProperty(value);
    }
    get pills() {
        return this._pills;
    }
    set pills(value) {
        this._pills = coerceBooleanProperty(value);
    }
    get vertical() {
        return this._vertical;
    }
    set vertical(value) {
        this._vertical = coerceBooleanProperty(value);
    }
    ngAfterContentInit() {
        const firstActiveTabIndex = this.tabs.toArray().findIndex((tab) => !tab.disabled);
        this.setActiveTab(firstActiveTabIndex);
        this.tabs.changes.pipe(takeUntil(this._destroy$)).subscribe(() => {
            const hasActiveTab = this.tabs.find((tab) => tab.active);
            if (!hasActiveTab) {
                const closestTabIndex = this._getClosestTabIndex(this._selectedIndex);
                if (closestTabIndex !== -1) {
                    this.setActiveTab(closestTabIndex);
                }
            }
        });
    }
    setActiveTab(index) {
        const activeTab = this.tabs.toArray()[index];
        if (!activeTab || (activeTab && activeTab.disabled)) {
            return;
        }
        this.tabs.forEach((tab) => (tab.active = tab === activeTab));
        this._selectedIndex = index;
        const tabChangeEvent = this._getTabChangeEvent(index, activeTab);
        this.activeTabChange.emit(tabChangeEvent);
    }
    _getTabChangeEvent(index, tab) {
        const event = new MdbTabChange();
        event.index = index;
        event.tab = tab;
        return event;
    }
    _getClosestTabIndex(index) {
        const tabs = this.tabs.toArray();
        const tabsLength = tabs.length;
        if (!tabsLength) {
            return -1;
        }
        for (let i = 1; i <= tabsLength; i += 1) {
            const prevIndex = index - i;
            const nextIndex = index + i;
            if (tabs[prevIndex] && !tabs[prevIndex].disabled) {
                return prevIndex;
            }
            if (tabs[nextIndex] && !tabs[nextIndex].disabled) {
                return nextIndex;
            }
        }
        return -1;
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
}
MdbTabsComponent.ɵfac = function MdbTabsComponent_Factory(t) { return new (t || MdbTabsComponent)(); };
MdbTabsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbTabsComponent, selectors: [["mdb-tabs"]], contentQueries: function MdbTabsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MdbTabComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabs = _t);
    } }, hostVars: 2, hostBindings: function MdbTabsComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("row", ctx.vertical);
    } }, inputs: { fill: "fill", justified: "justified", pills: "pills", vertical: "vertical" }, outputs: { activeTabChange: "activeTabChange" }, decls: 4, vars: 14, consts: [["role", "tablist", 1, "nav", "mb-3", "col-3", "flex-column", 3, "ngClass"], ["class", "nav-item", "role", "presentation", 3, "click", 4, "ngFor", "ngForOf"], [1, "tab-content", 3, "ngClass"], [4, "ngFor", "ngForOf"], ["role", "presentation", 1, "nav-item", 3, "click"], ["href", "javascript:void(0)", "role", "tab", 1, "nav-link"], [3, "ngIf"], [3, "cdkPortalOutlet"], [1, "tab-pane", "fade", 3, "ngClass"], ["mdbTabPortalOutlet", "", 3, "tab"]], template: function MdbTabsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵtemplate(1, MdbTabsComponent_li_1_Template, 4, 6, "li", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, MdbTabsComponent_ng_container_3_Template, 3, 5, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction7(4, _c2, ctx.pills, !ctx.pills, ctx.fill, ctx.justified, ctx.vertical, ctx.vertical, ctx.vertical));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(12, _c3, ctx.vertical));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabs);
    } }, directives: function () { return [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc2.CdkPortalOutlet, MdbTabPortalOutlet]; }, encapsulation: 2 });
MdbTabsComponent.ctorParameters = () => [];
MdbTabsComponent.propDecorators = {
    tabs: [{ type: ContentChildren, args: [MdbTabComponent,] }],
    fill: [{ type: Input }],
    justified: [{ type: Input }],
    pills: [{ type: Input }],
    vertical: [{ type: HostBinding, args: ['class.row',] }, { type: Input }],
    activeTabChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTabsComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-tabs',
                template: "<ul\n  class=\"nav mb-3 col-3 flex-column\"\n  [ngClass]=\"{\n    'nav-pills': pills,\n    'nav-tabs': !pills,\n    'nav-fill': fill,\n    'nav-justified': justified,\n    'flex-column': vertical,\n    'col-3': vertical,\n    'text-center': vertical\n  }\"\n  role=\"tablist\"\n>\n  <li\n    *ngFor=\"let tab of tabs; let i = index\"\n    (click)=\"setActiveTab(i)\"\n    class=\"nav-item\"\n    role=\"presentation\"\n  >\n    <a\n      href=\"javascript:void(0)\"\n      class=\"nav-link\"\n      [class.active]=\"tab.active\"\n      [class.disabled]=\"tab.disabled\"\n      role=\"tab\"\n    >\n      <ng-template [ngIf]=\"tab.titleContent\">\n        <ng-template [cdkPortalOutlet]=\"tab.titleContent\"></ng-template>\n      </ng-template>\n\n      <ng-template [ngIf]=\"!tab.titleContent\">{{ tab.title }}</ng-template>\n    </a>\n  </li>\n</ul>\n\n<div\n  class=\"tab-content\"\n  [ngClass]=\"{\n    'col-9': vertical\n  }\"\n>\n  <!-- <ng-content select=\"mdb-tab\"></ng-content> -->\n  <ng-container *ngFor=\"let tab of tabs\">\n    <div\n      class=\"tab-pane fade\"\n      [ngClass]=\"{\n        show: tab.active,\n        active: tab.active\n      }\"\n    >\n      <ng-template mdbTabPortalOutlet [tab]=\"tab\"></ng-template>\n    </div>\n  </ng-container>\n</div>\n"
            }]
    }], function () { return []; }, { activeTabChange: [{
            type: Output
        }], fill: [{
            type: Input
        }], justified: [{
            type: Input
        }], pills: [{
            type: Input
        }], vertical: [{
            type: HostBinding,
            args: ['class.row']
        }, {
            type: Input
        }], tabs: [{
            type: ContentChildren,
            args: [MdbTabComponent]
        }] }); })();

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class MdbTabPortalOutlet extends CdkPortalOutlet {
    constructor(_cfr, _vcr, _document) {
        super(_cfr, _vcr, _document);
        this._destroy$ = new Subject();
    }
    ngOnInit() {
        super.ngOnInit();
        if ((this.tab.shouldAttach || this.tab.active) && !this.hasAttached()) {
            this.attach(this.tab.content);
        }
        else {
            this.tab.activeStateChange$.pipe(takeUntil(this._destroy$)).subscribe((isActive) => {
                if (isActive && !this.hasAttached()) {
                    this.attach(this.tab.content);
                }
            });
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
        super.ngOnDestroy();
    }
}
MdbTabPortalOutlet.ɵfac = function MdbTabPortalOutlet_Factory(t) { return new (t || MdbTabPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
MdbTabPortalOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MdbTabPortalOutlet, selectors: [["", "mdbTabPortalOutlet", ""]], inputs: { tab: "tab" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
MdbTabPortalOutlet.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
MdbTabPortalOutlet.propDecorators = {
    tab: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTabPortalOutlet, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbTabPortalOutlet]'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { tab: [{
            type: Input
        }] }); })();

class MdbTabsModule {
}
MdbTabsModule.ɵfac = function MdbTabsModule_Factory(t) { return new (t || MdbTabsModule)(); };
MdbTabsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MdbTabsModule });
MdbTabsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, PortalModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTabsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MdbTabComponent,
                    MdbTabContentDirective,
                    MdbTabTitleDirective,
                    MdbTabPortalOutlet,
                    MdbTabsComponent,
                ],
                imports: [CommonModule, PortalModule],
                exports: [
                    MdbTabComponent,
                    MdbTabContentDirective,
                    MdbTabTitleDirective,
                    MdbTabPortalOutlet,
                    MdbTabsComponent,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbTabsModule, { declarations: function () { return [MdbTabComponent, MdbTabContentDirective, MdbTabTitleDirective, MdbTabPortalOutlet, MdbTabsComponent]; }, imports: function () { return [CommonModule, PortalModule]; }, exports: function () { return [MdbTabComponent, MdbTabContentDirective, MdbTabTitleDirective, MdbTabPortalOutlet, MdbTabsComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { MdbTabComponent, MdbTabContentDirective, MdbTabTitleDirective, MdbTabsComponent, MdbTabsModule, MDB_TAB_CONTENT as ɵa, MDB_TAB_TITLE as ɵb, MdbTabPortalOutlet as ɵc };

//# sourceMappingURL=mdb-angular-ui-kit-tabs.js.map